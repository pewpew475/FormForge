#!/usr/bin/env node

// Interactive setup script for FormForge deployment
// This script helps you configure environment variables and deploy to Supabase

import { readFileSync, writeFileSync } from 'fs';
import { createInterface } from 'readline';

const rl = createInterface({
  input: process.stdin,
  output: process.stdout
});

function question(prompt) {
  return new Promise((resolve) => {
    rl.question(prompt, resolve);
  });
}

async function setupDeployment() {
  console.log('üöÄ FormForge Deployment Setup');
  console.log('=====================================\n');
  
  console.log('This script will help you set up your FormForge application for deployment.');
  console.log('You\'ll need your Supabase project credentials.\n');
  
  const proceed = await question('Do you want to continue? (y/N): ');
  if (proceed.toLowerCase() !== 'y' && proceed.toLowerCase() !== 'yes') {
    console.log('Setup cancelled.');
    rl.close();
    return;
  }
  
  console.log('\nüìã Please provide your Supabase credentials:');
  console.log('(You can find these in your Supabase project settings)\n');
  
  const supabaseUrl = await question('Supabase Project URL (https://xxx.supabase.co): ');
  const supabaseAnonKey = await question('Supabase Anon Key: ');
  const supabaseServiceKey = await question('Supabase Service Role Key: ');
  const databaseUrl = await question('Database URL (postgresql://...): ');
  const frontendUrl = await question('Frontend URL (https://your-app.vercel.app) [optional]: ');
  
  // Create .env file
  const envContent = `# FormForge Environment Configuration
# Generated by setup script on ${new Date().toISOString()}

NODE_ENV=development

# Supabase Configuration
DATABASE_URL=${databaseUrl}
SUPABASE_URL=${supabaseUrl}
SUPABASE_ANON_KEY=${supabaseAnonKey}
SUPABASE_SERVICE_ROLE_KEY=${supabaseServiceKey}

# Storage Configuration
SUPABASE_STORAGE_BUCKET=form-images

# CORS Configuration (for production)
${frontendUrl ? `FRONTEND_URL=${frontendUrl}` : '# FRONTEND_URL=https://your-app.vercel.app'}

# Server Configuration
PORT=5000
`;

  try {
    writeFileSync('.env', envContent);
    console.log('\n‚úÖ Created .env file successfully!');
  } catch (error) {
    console.error('‚ùå Failed to create .env file:', error.message);
    rl.close();
    return;
  }
  
  console.log('\nüóÑÔ∏è Setting up database schema...');
  
  // Set environment variables for the current process
  process.env.SUPABASE_URL = supabaseUrl;
  process.env.SUPABASE_SERVICE_ROLE_KEY = supabaseServiceKey;
  
  try {
    const { execSync } = await import('child_process');
    execSync('npm run db:deploy', { stdio: 'inherit' });
    console.log('‚úÖ Database schema deployed successfully!');
  } catch (error) {
    console.error('‚ùå Failed to deploy database schema:', error.message);
    console.log('You can run "npm run db:deploy" manually later.');
  }
  
  console.log('\nüìã Vercel Environment Variables:');
  console.log('Copy these to your Vercel project settings:\n');
  
  console.log('NODE_ENV=production');
  console.log(`DATABASE_URL=${databaseUrl}`);
  console.log(`SUPABASE_URL=${supabaseUrl}`);
  console.log(`SUPABASE_ANON_KEY=${supabaseAnonKey}`);
  console.log(`SUPABASE_SERVICE_ROLE_KEY=${supabaseServiceKey}`);
  console.log('SUPABASE_STORAGE_BUCKET=form-images');
  if (frontendUrl) {
    console.log(`FRONTEND_URL=${frontendUrl}`);
  }
  
  console.log('\nüéâ Setup complete!');
  console.log('\nNext steps:');
  console.log('1. Create a storage bucket named "form-images" in Supabase');
  console.log('2. Set the bucket to public');
  console.log('3. Deploy to Vercel with the environment variables above');
  console.log('4. Run "npm run verify <your-vercel-url>" to test deployment');
  
  rl.close();
}

setupDeployment().catch(error => {
  console.error('‚ùå Setup failed:', error);
  rl.close();
  process.exit(1);
});
